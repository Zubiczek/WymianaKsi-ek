// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WymianaKsiazek.Database;

namespace WymianaKsiazek.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20211021101304_AddForeignKeys")]
    partial class AddForeignKeys
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.AddressEntity", b =>
                {
                    b.Property<long>("Address_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Community")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Address_Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookCommentsEntity", b =>
                {
                    b.Property<long>("Comment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Book_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Comment_Id");

                    b.HasIndex("Book_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("BookComments");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookEntity", b =>
                {
                    b.Property<long>("Book_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<long>("Category_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ISBN")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Book_Id");

                    b.HasIndex("Category_Id");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookOpinionsEntity", b =>
                {
                    b.Property<long>("Opinion_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Book_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Opinion1")
                        .HasColumnType("bigint");

                    b.Property<long>("Opinion2")
                        .HasColumnType("bigint");

                    b.Property<long>("Opinion3")
                        .HasColumnType("bigint");

                    b.Property<long>("Opinion4")
                        .HasColumnType("bigint");

                    b.Property<long>("Opinion5")
                        .HasColumnType("bigint");

                    b.HasKey("Opinion_Id");

                    b.HasIndex("Book_Id")
                        .IsUnique();

                    b.ToTable("BookOpinions");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<long>("Category_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category_Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Category_Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.OfferCommentsEntity", b =>
                {
                    b.Property<long>("Comment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("Offer_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Comment_Id");

                    b.HasIndex("Offer_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("OfferComments");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.OfferEntity", b =>
                {
                    b.Property<long>("Offer_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Address_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Book_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ForSale")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsitAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Offer_Id");

                    b.HasIndex("Address_Id");

                    b.HasIndex("Book_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Offer");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.UserBookOpinion", b =>
                {
                    b.Property<string>("User_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("Opinion_Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("User_Id", "Opinion_Id");

                    b.HasIndex("Opinion_Id");

                    b.ToTable("UserBookOpinions");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.UserEntity", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long>("Address_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Address_Id1")
                        .HasColumnType("bigint");

                    b.HasIndex("Address_Id1");

                    b.HasDiscriminator().HasValue("UserEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookCommentsEntity", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.BookEntity", "Book")
                        .WithMany("Comments")
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WymianaKsiazek.Database.Entities.UserEntity", "User")
                        .WithMany("BookComments")
                        .HasForeignKey("User_Id");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookEntity", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.CategoryEntity", "Category")
                        .WithMany("Books")
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookOpinionsEntity", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.BookEntity", "Book")
                        .WithOne("Opinion")
                        .HasForeignKey("WymianaKsiazek.Database.Entities.BookOpinionsEntity", "Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.OfferCommentsEntity", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.OfferEntity", "Offer")
                        .WithMany("Comments")
                        .HasForeignKey("Offer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WymianaKsiazek.Database.Entities.UserEntity", "User")
                        .WithMany("OfferComments")
                        .HasForeignKey("User_Id");

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.OfferEntity", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.AddressEntity", "Address")
                        .WithMany("Offers")
                        .HasForeignKey("Address_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WymianaKsiazek.Database.Entities.BookEntity", "Book")
                        .WithMany("Offers")
                        .HasForeignKey("Book_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WymianaKsiazek.Database.Entities.UserEntity", "User")
                        .WithMany("Offers")
                        .HasForeignKey("User_Id");

                    b.Navigation("Address");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.UserBookOpinion", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.BookOpinionsEntity", "Opinion")
                        .WithMany("UserOpinions")
                        .HasForeignKey("Opinion_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WymianaKsiazek.Database.Entities.UserEntity", "User")
                        .WithMany("UserOpinions")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Opinion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.UserEntity", b =>
                {
                    b.HasOne("WymianaKsiazek.Database.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("Address_Id1");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.AddressEntity", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookEntity", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Offers");

                    b.Navigation("Opinion");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.BookOpinionsEntity", b =>
                {
                    b.Navigation("UserOpinions");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.OfferEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WymianaKsiazek.Database.Entities.UserEntity", b =>
                {
                    b.Navigation("BookComments");

                    b.Navigation("OfferComments");

                    b.Navigation("Offers");

                    b.Navigation("UserOpinions");
                });
#pragma warning restore 612, 618
        }
    }
}
